// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Player extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Player entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Player must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Player", id.toString(), this);
    }
  }

  static load(id: string): Player | null {
    return changetype<Player | null>(store.get("Player", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get parcels(): Array<string> {
    let value = this.get("parcels");
    return value!.toStringArray();
  }

  set parcels(value: Array<string>) {
    this.set("parcels", Value.fromStringArray(value));
  }

  get parcelsCount(): i32 {
    let value = this.get("parcelsCount");
    return value!.toI32();
  }

  set parcelsCount(value: i32) {
    this.set("parcelsCount", Value.fromI32(value));
  }

  get installations(): Array<string> {
    let value = this.get("installations");
    return value!.toStringArray();
  }

  set installations(value: Array<string>) {
    this.set("installations", Value.fromStringArray(value));
  }

  get tiles(): Array<string> {
    let value = this.get("tiles");
    return value!.toStringArray();
  }

  set tiles(value: Array<string>) {
    this.set("tiles", Value.fromStringArray(value));
  }
}

export class Parcel extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Parcel entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Parcel must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Parcel", id.toString(), this);
    }
  }

  static load(id: string): Parcel | null {
    return changetype<Parcel | null>(store.get("Parcel", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get parcelId(): string | null {
    let value = this.get("parcelId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set parcelId(value: string | null) {
    if (!value) {
      this.unset("parcelId");
    } else {
      this.set("parcelId", Value.fromString(<string>value));
    }
  }

  get parcelHash(): string | null {
    let value = this.get("parcelHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set parcelHash(value: string | null) {
    if (!value) {
      this.unset("parcelHash");
    } else {
      this.set("parcelHash", Value.fromString(<string>value));
    }
  }

  get owner(): string | null {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set owner(value: string | null) {
    if (!value) {
      this.unset("owner");
    } else {
      this.set("owner", Value.fromString(<string>value));
    }
  }

  get district(): BigInt | null {
    let value = this.get("district");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set district(value: BigInt | null) {
    if (!value) {
      this.unset("district");
    } else {
      this.set("district", Value.fromBigInt(<BigInt>value));
    }
  }

  get size(): BigInt | null {
    let value = this.get("size");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set size(value: BigInt | null) {
    if (!value) {
      this.unset("size");
    } else {
      this.set("size", Value.fromBigInt(<BigInt>value));
    }
  }

  get coordinateX(): BigInt | null {
    let value = this.get("coordinateX");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set coordinateX(value: BigInt | null) {
    if (!value) {
      this.unset("coordinateX");
    } else {
      this.set("coordinateX", Value.fromBigInt(<BigInt>value));
    }
  }

  get coordinateY(): BigInt | null {
    let value = this.get("coordinateY");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set coordinateY(value: BigInt | null) {
    if (!value) {
      this.unset("coordinateY");
    } else {
      this.set("coordinateY", Value.fromBigInt(<BigInt>value));
    }
  }

  get lastChanneled(): i32 {
    let value = this.get("lastChanneled");
    return value!.toI32();
  }

  set lastChanneled(value: i32) {
    this.set("lastChanneled", Value.fromI32(value));
  }

  get lastClaimed(): i32 {
    let value = this.get("lastClaimed");
    return value!.toI32();
  }

  set lastClaimed(value: i32) {
    this.set("lastClaimed", Value.fromI32(value));
  }

  get fudBoost(): BigInt | null {
    let value = this.get("fudBoost");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set fudBoost(value: BigInt | null) {
    if (!value) {
      this.unset("fudBoost");
    } else {
      this.set("fudBoost", Value.fromBigInt(<BigInt>value));
    }
  }

  get fomoBoost(): BigInt | null {
    let value = this.get("fomoBoost");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set fomoBoost(value: BigInt | null) {
    if (!value) {
      this.unset("fomoBoost");
    } else {
      this.set("fomoBoost", Value.fromBigInt(<BigInt>value));
    }
  }

  get alphaBoost(): BigInt | null {
    let value = this.get("alphaBoost");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set alphaBoost(value: BigInt | null) {
    if (!value) {
      this.unset("alphaBoost");
    } else {
      this.set("alphaBoost", Value.fromBigInt(<BigInt>value));
    }
  }

  get kekBoost(): BigInt | null {
    let value = this.get("kekBoost");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set kekBoost(value: BigInt | null) {
    if (!value) {
      this.unset("kekBoost");
    } else {
      this.set("kekBoost", Value.fromBigInt(<BigInt>value));
    }
  }

  get alchemica(): Array<BigInt> {
    let value = this.get("alchemica");
    return value!.toBigIntArray();
  }

  set alchemica(value: Array<BigInt>) {
    this.set("alchemica", Value.fromBigIntArray(value));
  }

  get surveys(): Array<string> | null {
    let value = this.get("surveys");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set surveys(value: Array<string> | null) {
    if (!value) {
      this.unset("surveys");
    } else {
      this.set("surveys", Value.fromStringArray(<Array<string>>value));
    }
  }

  get installations(): Array<string> {
    let value = this.get("installations");
    return value!.toStringArray();
  }

  set installations(value: Array<string>) {
    this.set("installations", Value.fromStringArray(value));
  }

  get tiles(): Array<string> {
    let value = this.get("tiles");
    return value!.toStringArray();
  }

  set tiles(value: Array<string>) {
    this.set("tiles", Value.fromStringArray(value));
  }

  get auctionId(): string | null {
    let value = this.get("auctionId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set auctionId(value: string | null) {
    if (!value) {
      this.unset("auctionId");
    } else {
      this.set("auctionId", Value.fromString(<string>value));
    }
  }

  get timesTraded(): BigInt {
    let value = this.get("timesTraded");
    return value!.toBigInt();
  }

  set timesTraded(value: BigInt) {
    this.set("timesTraded", Value.fromBigInt(value));
  }

  get historicalPrices(): Array<BigInt> | null {
    let value = this.get("historicalPrices");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set historicalPrices(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("historicalPrices");
    } else {
      this.set("historicalPrices", Value.fromBigIntArray(<Array<BigInt>>value));
    }
  }

  get listings(): Array<string> | null {
    let value = this.get("listings");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set listings(value: Array<string> | null) {
    if (!value) {
      this.unset("listings");
    } else {
      this.set("listings", Value.fromStringArray(<Array<string>>value));
    }
  }

  get activeListing(): BigInt | null {
    let value = this.get("activeListing");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set activeListing(value: BigInt | null) {
    if (!value) {
      this.unset("activeListing");
    } else {
      this.set("activeListing", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class Survey extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Survey entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Survey must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Survey", id.toString(), this);
    }
  }

  static load(id: string): Survey | null {
    return changetype<Survey | null>(store.get("Survey", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get surveyed(): Bytes {
    let value = this.get("surveyed");
    return value!.toBytes();
  }

  set surveyed(value: Bytes) {
    this.set("surveyed", Value.fromBytes(value));
  }

  get parcel(): string {
    let value = this.get("parcel");
    return value!.toString();
  }

  set parcel(value: string) {
    this.set("parcel", Value.fromString(value));
  }

  get round(): i32 {
    let value = this.get("round");
    return value!.toI32();
  }

  set round(value: i32) {
    this.set("round", Value.fromI32(value));
  }

  get fud(): BigInt {
    let value = this.get("fud");
    return value!.toBigInt();
  }

  set fud(value: BigInt) {
    this.set("fud", Value.fromBigInt(value));
  }

  get fomo(): BigInt {
    let value = this.get("fomo");
    return value!.toBigInt();
  }

  set fomo(value: BigInt) {
    this.set("fomo", Value.fromBigInt(value));
  }

  get alpha(): BigInt {
    let value = this.get("alpha");
    return value!.toBigInt();
  }

  set alpha(value: BigInt) {
    this.set("alpha", Value.fromBigInt(value));
  }

  get kek(): BigInt {
    let value = this.get("kek");
    return value!.toBigInt();
  }

  set kek(value: BigInt) {
    this.set("kek", Value.fromBigInt(value));
  }
}

export class Installation extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Installation entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Installation must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Installation", id.toString(), this);
    }
  }

  static load(id: string): Installation | null {
    return changetype<Installation | null>(store.get("Installation", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get installationId(): i32 {
    let value = this.get("installationId");
    return value!.toI32();
  }

  set installationId(value: i32) {
    this.set("installationId", Value.fromI32(value));
  }

  get equipped(): boolean {
    let value = this.get("equipped");
    return value!.toBoolean();
  }

  set equipped(value: boolean) {
    this.set("equipped", Value.fromBoolean(value));
  }

  get parcel(): string | null {
    let value = this.get("parcel");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set parcel(value: string | null) {
    if (!value) {
      this.unset("parcel");
    } else {
      this.set("parcel", Value.fromString(<string>value));
    }
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get x(): i32 {
    let value = this.get("x");
    return value!.toI32();
  }

  set x(value: i32) {
    this.set("x", Value.fromI32(value));
  }

  get y(): i32 {
    let value = this.get("y");
    return value!.toI32();
  }

  set y(value: i32) {
    this.set("y", Value.fromI32(value));
  }
}

export class Tile extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Tile entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Tile must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Tile", id.toString(), this);
    }
  }

  static load(id: string): Tile | null {
    return changetype<Tile | null>(store.get("Tile", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tileId(): i32 {
    let value = this.get("tileId");
    return value!.toI32();
  }

  set tileId(value: i32) {
    this.set("tileId", Value.fromI32(value));
  }

  get equipped(): boolean {
    let value = this.get("equipped");
    return value!.toBoolean();
  }

  set equipped(value: boolean) {
    this.set("equipped", Value.fromBoolean(value));
  }

  get parcel(): string | null {
    let value = this.get("parcel");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set parcel(value: string | null) {
    if (!value) {
      this.unset("parcel");
    } else {
      this.set("parcel", Value.fromString(<string>value));
    }
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get x(): i32 {
    let value = this.get("x");
    return value!.toI32();
  }

  set x(value: i32) {
    this.set("x", Value.fromI32(value));
  }

  get y(): i32 {
    let value = this.get("y");
    return value!.toI32();
  }

  set y(value: i32) {
    this.set("y", Value.fromI32(value));
  }
}

export class Gotchi extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Gotchi entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Gotchi must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Gotchi", id.toString(), this);
    }
  }

  static load(id: string): Gotchi | null {
    return changetype<Gotchi | null>(store.get("Gotchi", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get lastChanneled(): i32 {
    let value = this.get("lastChanneled");
    return value!.toI32();
  }

  set lastChanneled(value: i32) {
    this.set("lastChanneled", Value.fromI32(value));
  }
}

export class ERC721Listing extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ERC721Listing entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ERC721Listing must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ERC721Listing", id.toString(), this);
    }
  }

  static load(id: string): ERC721Listing | null {
    return changetype<ERC721Listing | null>(store.get("ERC721Listing", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get category(): BigInt {
    let value = this.get("category");
    return value!.toBigInt();
  }

  set category(value: BigInt) {
    this.set("category", Value.fromBigInt(value));
  }

  get erc721TokenAddress(): Bytes {
    let value = this.get("erc721TokenAddress");
    return value!.toBytes();
  }

  set erc721TokenAddress(value: Bytes) {
    this.set("erc721TokenAddress", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get seller(): Bytes {
    let value = this.get("seller");
    return value!.toBytes();
  }

  set seller(value: Bytes) {
    this.set("seller", Value.fromBytes(value));
  }

  get buyer(): Bytes | null {
    let value = this.get("buyer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set buyer(value: Bytes | null) {
    if (!value) {
      this.unset("buyer");
    } else {
      this.set("buyer", Value.fromBytes(<Bytes>value));
    }
  }

  get recipient(): Bytes | null {
    let value = this.get("recipient");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set recipient(value: Bytes | null) {
    if (!value) {
      this.unset("recipient");
    } else {
      this.set("recipient", Value.fromBytes(<Bytes>value));
    }
  }

  get timeCreated(): BigInt {
    let value = this.get("timeCreated");
    return value!.toBigInt();
  }

  set timeCreated(value: BigInt) {
    this.set("timeCreated", Value.fromBigInt(value));
  }

  get timePurchased(): BigInt | null {
    let value = this.get("timePurchased");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timePurchased(value: BigInt | null) {
    if (!value) {
      this.unset("timePurchased");
    } else {
      this.set("timePurchased", Value.fromBigInt(<BigInt>value));
    }
  }

  get cancelled(): boolean {
    let value = this.get("cancelled");
    return value!.toBoolean();
  }

  set cancelled(value: boolean) {
    this.set("cancelled", Value.fromBoolean(value));
  }

  get priceInWei(): BigInt {
    let value = this.get("priceInWei");
    return value!.toBigInt();
  }

  set priceInWei(value: BigInt) {
    this.set("priceInWei", Value.fromBigInt(value));
  }

  get parcel(): string | null {
    let value = this.get("parcel");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set parcel(value: string | null) {
    if (!value) {
      this.unset("parcel");
    } else {
      this.set("parcel", Value.fromString(<string>value));
    }
  }

  get blockCreated(): BigInt {
    let value = this.get("blockCreated");
    return value!.toBigInt();
  }

  set blockCreated(value: BigInt) {
    this.set("blockCreated", Value.fromBigInt(value));
  }

  get fudBoost(): BigInt | null {
    let value = this.get("fudBoost");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set fudBoost(value: BigInt | null) {
    if (!value) {
      this.unset("fudBoost");
    } else {
      this.set("fudBoost", Value.fromBigInt(<BigInt>value));
    }
  }

  get fomoBoost(): BigInt | null {
    let value = this.get("fomoBoost");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set fomoBoost(value: BigInt | null) {
    if (!value) {
      this.unset("fomoBoost");
    } else {
      this.set("fomoBoost", Value.fromBigInt(<BigInt>value));
    }
  }

  get alphaBoost(): BigInt | null {
    let value = this.get("alphaBoost");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set alphaBoost(value: BigInt | null) {
    if (!value) {
      this.unset("alphaBoost");
    } else {
      this.set("alphaBoost", Value.fromBigInt(<BigInt>value));
    }
  }

  get kekBoost(): BigInt | null {
    let value = this.get("kekBoost");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set kekBoost(value: BigInt | null) {
    if (!value) {
      this.unset("kekBoost");
    } else {
      this.set("kekBoost", Value.fromBigInt(<BigInt>value));
    }
  }

  get district(): BigInt | null {
    let value = this.get("district");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set district(value: BigInt | null) {
    if (!value) {
      this.unset("district");
    } else {
      this.set("district", Value.fromBigInt(<BigInt>value));
    }
  }

  get coordinateX(): BigInt | null {
    let value = this.get("coordinateX");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set coordinateX(value: BigInt | null) {
    if (!value) {
      this.unset("coordinateX");
    } else {
      this.set("coordinateX", Value.fromBigInt(<BigInt>value));
    }
  }

  get coordinateY(): BigInt | null {
    let value = this.get("coordinateY");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set coordinateY(value: BigInt | null) {
    if (!value) {
      this.unset("coordinateY");
    } else {
      this.set("coordinateY", Value.fromBigInt(<BigInt>value));
    }
  }

  get size(): BigInt | null {
    let value = this.get("size");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set size(value: BigInt | null) {
    if (!value) {
      this.unset("size");
    } else {
      this.set("size", Value.fromBigInt(<BigInt>value));
    }
  }

  get parcelHash(): string | null {
    let value = this.get("parcelHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set parcelHash(value: string | null) {
    if (!value) {
      this.unset("parcelHash");
    } else {
      this.set("parcelHash", Value.fromString(<string>value));
    }
  }

  get nameLowerCase(): string | null {
    let value = this.get("nameLowerCase");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set nameLowerCase(value: string | null) {
    if (!value) {
      this.unset("nameLowerCase");
    } else {
      this.set("nameLowerCase", Value.fromString(<string>value));
    }
  }

  get amountEquippedWearables(): i32 {
    let value = this.get("amountEquippedWearables");
    return value!.toI32();
  }

  set amountEquippedWearables(value: i32) {
    this.set("amountEquippedWearables", Value.fromI32(value));
  }

  get soldBefore(): boolean {
    let value = this.get("soldBefore");
    return value!.toBoolean();
  }

  set soldBefore(value: boolean) {
    this.set("soldBefore", Value.fromBoolean(value));
  }

  get claimedAt(): BigInt | null {
    let value = this.get("claimedAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set claimedAt(value: BigInt | null) {
    if (!value) {
      this.unset("claimedAt");
    } else {
      this.set("claimedAt", Value.fromBigInt(<BigInt>value));
    }
  }
}
