// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Player extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Player entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Player must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Player", id.toString(), this);
    }
  }

  static load(id: string): Player | null {
    return changetype<Player | null>(store.get("Player", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get portalsBought(): Array<string> {
    let value = this.get("portalsBought");
    return value!.toStringArray();
  }

  set portalsBought(value: Array<string>) {
    this.set("portalsBought", Value.fromStringArray(value));
  }

  get portalsOwned(): Array<string> {
    let value = this.get("portalsOwned");
    return value!.toStringArray();
  }

  set portalsOwned(value: Array<string>) {
    this.set("portalsOwned", Value.fromStringArray(value));
  }

  get portalsAmount(): i32 {
    let value = this.get("portalsAmount");
    return value!.toI32();
  }

  set portalsAmount(value: i32) {
    this.set("portalsAmount", Value.fromI32(value));
  }

  get gotchisOwned(): Array<string> {
    let value = this.get("gotchisOwned");
    return value!.toStringArray();
  }

  set gotchisOwned(value: Array<string>) {
    this.set("gotchisOwned", Value.fromStringArray(value));
  }

  get gotchisOriginalOwned(): Array<string> {
    let value = this.get("gotchisOriginalOwned");
    return value!.toStringArray();
  }

  set gotchisOriginalOwned(value: Array<string>) {
    this.set("gotchisOriginalOwned", Value.fromStringArray(value));
  }

  get gotchisAmount(): i32 {
    let value = this.get("gotchisAmount");
    return value!.toI32();
  }

  set gotchisAmount(value: i32) {
    this.set("gotchisAmount", Value.fromI32(value));
  }

  get gotchisLentOut(): Array<BigInt> {
    let value = this.get("gotchisLentOut");
    return value!.toBigIntArray();
  }

  set gotchisLentOut(value: Array<BigInt>) {
    this.set("gotchisLentOut", Value.fromBigIntArray(value));
  }

  get gotchisLentOutAmount(): i32 {
    let value = this.get("gotchisLentOutAmount");
    return value!.toI32();
  }

  set gotchisLentOutAmount(value: i32) {
    this.set("gotchisLentOutAmount", Value.fromI32(value));
  }

  get gotchisBorrowed(): Array<BigInt> {
    let value = this.get("gotchisBorrowed");
    return value!.toBigIntArray();
  }

  set gotchisBorrowed(value: Array<BigInt>) {
    this.set("gotchisBorrowed", Value.fromBigIntArray(value));
  }

  get gotchisBorrowedAmount(): i32 {
    let value = this.get("gotchisBorrowedAmount");
    return value!.toI32();
  }

  set gotchisBorrowedAmount(value: i32) {
    this.set("gotchisBorrowedAmount", Value.fromI32(value));
  }

  get items(): Array<string> | null {
    let value = this.get("items");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set items(value: Array<string> | null) {
    if (!value) {
      this.unset("items");
    } else {
      this.set("items", Value.fromStringArray(<Array<string>>value));
    }
  }

  get itemsAmount(): i32 {
    let value = this.get("itemsAmount");
    return value!.toI32();
  }

  set itemsAmount(value: i32) {
    this.set("itemsAmount", Value.fromI32(value));
  }
}

export class AavegotchiOption extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AavegotchiOption entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AavegotchiOption must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AavegotchiOption", id.toString(), this);
    }
  }

  static load(id: string): AavegotchiOption | null {
    return changetype<AavegotchiOption | null>(
      store.get("AavegotchiOption", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get portalOptionId(): i32 {
    let value = this.get("portalOptionId");
    return value!.toI32();
  }

  set portalOptionId(value: i32) {
    this.set("portalOptionId", Value.fromI32(value));
  }

  get gotchiId(): BigInt {
    let value = this.get("gotchiId");
    return value!.toBigInt();
  }

  set gotchiId(value: BigInt) {
    this.set("gotchiId", Value.fromBigInt(value));
  }

  get hauntId(): i32 {
    let value = this.get("hauntId");
    return value!.toI32();
  }

  set hauntId(value: i32) {
    this.set("hauntId", Value.fromI32(value));
  }

  get owner(): string | null {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set owner(value: string | null) {
    if (!value) {
      this.unset("owner");
    } else {
      this.set("owner", Value.fromString(<string>value));
    }
  }

  get portal(): string {
    let value = this.get("portal");
    return value!.toString();
  }

  set portal(value: string) {
    this.set("portal", Value.fromString(value));
  }

  get randomNumber(): BigInt {
    let value = this.get("randomNumber");
    return value!.toBigInt();
  }

  set randomNumber(value: BigInt) {
    this.set("randomNumber", Value.fromBigInt(value));
  }

  get numericTraits(): Array<i32> {
    let value = this.get("numericTraits");
    return value!.toI32Array();
  }

  set numericTraits(value: Array<i32>) {
    this.set("numericTraits", Value.fromI32Array(value));
  }

  get identity(): string {
    let value = this.get("identity");
    return value!.toString();
  }

  set identity(value: string) {
    this.set("identity", Value.fromString(value));
  }

  get collateralType(): Bytes {
    let value = this.get("collateralType");
    return value!.toBytes();
  }

  set collateralType(value: Bytes) {
    this.set("collateralType", Value.fromBytes(value));
  }
}

export class Gotchi extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Gotchi entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Gotchi must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Gotchi", id.toString(), this);
    }
  }

  static load(id: string): Gotchi | null {
    return changetype<Gotchi | null>(store.get("Gotchi", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get gotchiId(): BigInt {
    let value = this.get("gotchiId");
    return value!.toBigInt();
  }

  set gotchiId(value: BigInt) {
    this.set("gotchiId", Value.fromBigInt(value));
  }

  get owner(): string | null {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set owner(value: string | null) {
    if (!value) {
      this.unset("owner");
    } else {
      this.set("owner", Value.fromString(<string>value));
    }
  }

  get originalOwner(): string | null {
    let value = this.get("originalOwner");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set originalOwner(value: string | null) {
    if (!value) {
      this.unset("originalOwner");
    } else {
      this.set("originalOwner", Value.fromString(<string>value));
    }
  }

  get portal(): string {
    let value = this.get("portal");
    return value!.toString();
  }

  set portal(value: string) {
    this.set("portal", Value.fromString(value));
  }

  get usedSkillPoints(): BigInt {
    let value = this.get("usedSkillPoints");
    return value!.toBigInt();
  }

  set usedSkillPoints(value: BigInt) {
    this.set("usedSkillPoints", Value.fromBigInt(value));
  }

  get availableSkillPoints(): BigInt {
    let value = this.get("availableSkillPoints");
    return value!.toBigInt();
  }

  set availableSkillPoints(value: BigInt) {
    this.set("availableSkillPoints", Value.fromBigInt(value));
  }

  get badges(): Array<i32> {
    let value = this.get("badges");
    return value!.toI32Array();
  }

  set badges(value: Array<i32>) {
    this.set("badges", Value.fromI32Array(value));
  }

  get collateral(): Bytes {
    let value = this.get("collateral");
    return value!.toBytes();
  }

  set collateral(value: Bytes) {
    this.set("collateral", Value.fromBytes(value));
  }

  get numericTraits(): Array<i32> {
    let value = this.get("numericTraits");
    return value!.toI32Array();
  }

  set numericTraits(value: Array<i32>) {
    this.set("numericTraits", Value.fromI32Array(value));
  }

  get hauntId(): BigInt {
    let value = this.get("hauntId");
    return value!.toBigInt();
  }

  set hauntId(value: BigInt) {
    this.set("hauntId", Value.fromBigInt(value));
  }

  get identity(): string {
    let value = this.get("identity");
    return value!.toString();
  }

  set identity(value: string) {
    this.set("identity", Value.fromString(value));
  }

  get lending(): BigInt | null {
    let value = this.get("lending");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set lending(value: BigInt | null) {
    if (!value) {
      this.unset("lending");
    } else {
      this.set("lending", Value.fromBigInt(<BigInt>value));
    }
  }

  get modifiedRarityScore(): BigInt {
    let value = this.get("modifiedRarityScore");
    return value!.toBigInt();
  }

  set modifiedRarityScore(value: BigInt) {
    this.set("modifiedRarityScore", Value.fromBigInt(value));
  }
}

export class Identity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Identity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Identity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Identity", id.toString(), this);
    }
  }

  static load(id: string): Identity | null {
    return changetype<Identity | null>(store.get("Identity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get collateral(): Bytes {
    let value = this.get("collateral");
    return value!.toBytes();
  }

  set collateral(value: Bytes) {
    this.set("collateral", Value.fromBytes(value));
  }

  get shape(): string {
    let value = this.get("shape");
    return value!.toString();
  }

  set shape(value: string) {
    this.set("shape", Value.fromString(value));
  }

  get color(): string {
    let value = this.get("color");
    return value!.toString();
  }

  set color(value: string) {
    this.set("color", Value.fromString(value));
  }

  get claimed(): Array<string> {
    let value = this.get("claimed");
    return value!.toStringArray();
  }

  set claimed(value: Array<string>) {
    this.set("claimed", Value.fromStringArray(value));
  }

  get claimedAmount(): i32 {
    let value = this.get("claimedAmount");
    return value!.toI32();
  }

  set claimedAmount(value: i32) {
    this.set("claimedAmount", Value.fromI32(value));
  }

  get unclaimed(): Array<string> {
    let value = this.get("unclaimed");
    return value!.toStringArray();
  }

  set unclaimed(value: Array<string>) {
    this.set("unclaimed", Value.fromStringArray(value));
  }

  get unclaimedAmount(): i32 {
    let value = this.get("unclaimedAmount");
    return value!.toI32();
  }

  set unclaimedAmount(value: i32) {
    this.set("unclaimedAmount", Value.fromI32(value));
  }
}

export class Portal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Portal entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Portal must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Portal", id.toString(), this);
    }
  }

  static load(id: string): Portal | null {
    return changetype<Portal | null>(store.get("Portal", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get gotchiId(): BigInt | null {
    let value = this.get("gotchiId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gotchiId(value: BigInt | null) {
    if (!value) {
      this.unset("gotchiId");
    } else {
      this.set("gotchiId", Value.fromBigInt(<BigInt>value));
    }
  }

  get buyer(): string | null {
    let value = this.get("buyer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set buyer(value: string | null) {
    if (!value) {
      this.unset("buyer");
    } else {
      this.set("buyer", Value.fromString(<string>value));
    }
  }

  get hauntId(): BigInt {
    let value = this.get("hauntId");
    return value!.toBigInt();
  }

  set hauntId(value: BigInt) {
    this.set("hauntId", Value.fromBigInt(value));
  }

  get owner(): string | null {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set owner(value: string | null) {
    if (!value) {
      this.unset("owner");
    } else {
      this.set("owner", Value.fromString(<string>value));
    }
  }

  get gotchi(): string | null {
    let value = this.get("gotchi");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set gotchi(value: string | null) {
    if (!value) {
      this.unset("gotchi");
    } else {
      this.set("gotchi", Value.fromString(<string>value));
    }
  }

  get options(): Array<string> {
    let value = this.get("options");
    return value!.toStringArray();
  }

  set options(value: Array<string>) {
    this.set("options", Value.fromStringArray(value));
  }

  get status(): string {
    let value = this.get("status");
    return value!.toString();
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }
}

export class ERC1155Item extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ERC1155Item entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ERC1155Item must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ERC1155Item", id.toString(), this);
    }
  }

  static load(id: string): ERC1155Item | null {
    return changetype<ERC1155Item | null>(store.get("ERC1155Item", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get amount(): i32 {
    let value = this.get("amount");
    return value!.toI32();
  }

  set amount(value: i32) {
    this.set("amount", Value.fromI32(value));
  }

  get tokenId(): i32 {
    let value = this.get("tokenId");
    return value!.toI32();
  }

  set tokenId(value: i32) {
    this.set("tokenId", Value.fromI32(value));
  }

  get category(): i32 {
    let value = this.get("category");
    return value!.toI32();
  }

  set category(value: i32) {
    this.set("category", Value.fromI32(value));
  }

  get equipped(): i32 {
    let value = this.get("equipped");
    return value!.toI32();
  }

  set equipped(value: i32) {
    this.set("equipped", Value.fromI32(value));
  }
}
